<!DOCTYPE html>
<html>
<head>
  <title>Log Disperser</title>
  <script src="./js/jquery.min.js"></script>
  <script src="./js/socket.io.js"></script>
  <script src="./js/underscore.min.js"></script>
  <script src="./js/moment.min.js"></script>
  <script src="./js/bootstrap.min.js"></script>
  <script src="./js/init.js"></script>
  <link rel="stylesheet" type="text/css" href="./css/bootstrap.min.css">
  <style>
    #log-table { font-size: 11.5px; }
    #log-table code { white-space: pre-line; }
  </style>
</head>
<body>
  <nav id="menu" class="navbar navbar-default">
    <div class="container-fluid">
      <div class="navbar-header">
        <a class="navbar-brand" href="#">Log Disperser</a>
      </div>
      <ul class="rooms nav navbar-nav">
      </ul>
    </div>
  </nav>

  <table class="table table-hover table-condensed" id="log-table">
    <thead>
      <tr>
        <th width="80">Time</th>
        <th width="50">Room</th>
        <th width="100">UUID</th>
        <th width="50">Type</th>
        <th>Message</th>
      </tr>
    </thead>
    <tbody>
    </tbody>
  </table>

  <% include template.ejs %>

  <script>
    var $table = $("#log-table tbody");
    var rowTmpl = _.template($("#row-tmpl").html());

    // dynamically create rooms immediately
    var $rooms = $("#menu .rooms");
    var roomTmpl = _.template($("#room-tmpl").html());

    // clicking on row toggles full message view
    $("#log-table").on("click", ".log-each td", function(e) {
      $(e.target).closest(".log-each").find("code").toggle();
    });

    // clicking on the room enables logging
    $("#menu").on("click", ".room", function(e) {
      $("#menu .room.active")
        .removeClass("active")
        .children("a")
        .each(function(i, el) {
          socket.emit("leave", { room: $(el).html() });
        });
      $table.empty();
      $(e.currentTarget).addClass("active");
      socket.emit("join", { room: $(e.target).html() }, function(datas) {
        var roomTmpl = _.template($("#room-tmpl").html());
        datas.forEach(function(data) {
          var typeLabel = "default";
          switch(data.type) {
            case "exception": typeLabel = "danger"; break;
            case "error":     typeLabel = "danger"; break;
            case "assert":    typeLabel = "active"; break;
            case "warn":      typeLabel = "warning"; break;
            case "log":       typeLabel = "default"; break;
          }
          $table.prepend(rowTmpl({
            room: data.room,
            uuid: data.uuid,
            time: {
              raw: data.time,
              formatted: moment(new Date(data.time)).format("HH:mm:ss.SSS")
            },
            type: {
              name: data.type,
              label: typeLabel,
            },
            message: {
              digest: data.message.split("\n")[0],
              full: data.message
            }
          }));
        });
      });
      return false;
    });

    socket.once("connect", function (data) {
      socket.on("created", function(data) {
        if ($("#menu .room-" + data.room).length == 0) {
          var roomTmpl = _.template($("#room-tmpl").html());
          $rooms.append(roomTmpl({ room: data.room, active: false }));
        }
      });
      socket.on("logged", function(data) {
        var typeLabel = "default";
        switch(data.type) {
          case "exception": typeLabel = "danger"; break;
          case "error":     typeLabel = "danger"; break;
          case "assert":    typeLabel = "active"; break;
          case "warn":      typeLabel = "warning"; break;
          case "log":       typeLabel = "default"; break;
        }

        $table.prepend(rowTmpl({
          room: data.room,
          uuid: data.uuid,
          time: {
            raw: data.time,
            formatted: moment(new Date(data.time)).format("HH:mm:ss.SSS")
          },
          type: {
            name: data.type,
            label: typeLabel,
          },
          message: {
            digest: data.message.split("\n")[0],
            full: data.message
          }
        }));
      });

      socket.emit("join", { room: "all" }, function(data) {
        var roomIds = <%- JSON.stringify(Object.keys(roomIds)) %>;
        var filteredIds = [];
        roomIds.forEach(function(roomId) {
          if(roomId.indexOf("room:s:") >= 0) {
            filteredIds.push(roomId.replace("room:s:", ""));
          }
        });
        filteredIds.sort().forEach(function(k, i) {
          $rooms.append(roomTmpl({ room: k, active: k == "all" }));
        });
      });
    });
  </script>
</body>
</html>
